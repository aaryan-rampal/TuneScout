// âœ… Fetch user's playlists
export const getUserPlaylists = async (access_token: string) => {
  const response = await fetch("https://api.spotify.com/v1/me/playlists", {
    method: "GET",
    headers: { Authorization: `Bearer ${access_token}` },
  });

  if (!response.ok) {
    throw new Error(`Spotify API error: ${response.statusText}`);
  }

  const data = await response.json();
  return data.items.map((playlist) => ({
    id: playlist.id,
    name: playlist.name,
    image: playlist.images?.[0]?.url || "",
  }));
};

export const fetchSpotifyTrackId = async (trackName, artistName, access_token) => {
try {
    const url = `https://api.spotify.com/v1/search?q=track:${encodeURIComponent(
    trackName
    )}%20artist:${encodeURIComponent(artistName)}&type=track&limit=1`;
    console.log(url)

    const response = await fetch(url, {
    method: "GET",
    headers: {
        "Content-Type": "spotifyRouteslication/json",
        Authorization: `Bearer ${access_token}`,
    },
    });

    if (!response.ok) {
    console.error(
        `Failed to fetch track "${trackName}" by "${artistName}"`
    );
    console.error("Response status:", response.status);
    return null;
    }

    const data = await response.json();
    const track = data.tracks.items[0];
    const image = track.album.images[0].url;
    const runtime = track.duration_ms;
    const id = track.id;
    const uri = track.uri;
    return { name: trackName, artist: artistName, image, runtime, id, uri }; // Return the image
} catch (error) {
    console.error("Error fetching Spotify track ID:", error);
    return null;
}
};

// âœ… Fetch all tracks from a playlist (handles pagination)
export const fetchAllPlaylistTracks = async (playlist_id: string, access_token: string) => {
  const allTracks = [];
  let nextUrl = `https://api.spotify.com/v1/playlists/${playlist_id}/tracks`;

  while (nextUrl) {
    const response = await fetch(nextUrl, {
      method: "GET",
      headers: { Authorization: `Bearer ${access_token}` },
    });

    if (!response.ok) {
      throw new Error(`Spotify API error: ${response.statusText}`);
    }

    const data = await response.json();
    allTracks.push(...data.items);
    nextUrl = data.next;
  }

  return allTracks.map((item) => ({
    name: item.track.name,
    artist: item.track.artists.map((artist) => artist.name).join(", "),
    album: item.track.album.name,
    id: item.track.id,
  }));
};

// âœ… Create a new playlist
export const createPlaylist = async (name: string, access_token: string) => {
  const response = await fetch("https://api.spotify.com/v1/me/playlists", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${access_token}`,
    },
    body: JSON.stringify({ name, description: "Generated by TuneScout ðŸŽµ", public: false }),
  });

  if (!response.ok) {
    throw new Error(`Spotify API error: ${response.statusText}`);
  }

  return await response.json();
};

// âœ… Add tracks to a playlist
export const addTracksToPlaylist = async (playlistId: string, trackUris: string[], access_token: string) => {
  const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${access_token}`,
    },
    body: JSON.stringify({ uris: trackUris }),
  });

  if (!response.ok) {
    throw new Error(`Spotify API error: ${response.statusText}`);
  }

  return await response.json();
};
